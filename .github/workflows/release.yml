name: "Bump new version"
on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major


permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/release/deps
            target/release/build
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Install cargo-edit
        run: |
          cargo install cargo-edit

      - name: Bump version
        run: |
          cargo set-version --bump ${{ github.event.inputs.bump_type }}
          VERSION=$(cargo pkgid | sed 's/.*#\([^:]*\)$/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Bumping version to: $VERSION"

      - name: Create and push release branch
        run: |
          git checkout -b release
          git add Cargo.toml Cargo.lock
          git commit -m "Bump version to ${{ env.VERSION }}"
          git push origin release --force

      - name: Build changelog
        id: github_release_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-configuration.json"
          toTag: "refs/heads/main"
          failOnError: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl

      - name: Build
        run: |
          cargo build --release

      - name: Compress with UPX
        run: |
          BINARY_NAME=$(basename $(find target/release -maxdepth 1 -type f -executable -not -name "*.*" | head -n 1))
          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
          upx --best --lzma target/release/${BINARY_NAME}

      - name: Package as tar.gz
        run: |
          PACKAGE_NAME=${{ github.event.repository.name }}-v${{ env.VERSION }}-linux-x64
          tar -czf ${PACKAGE_NAME}.tar.gz -C target/release ${{ env.BINARY_NAME }}
          echo "ASSET_NAME=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          body: ${{ steps.github_release_changelog.outputs.changelog }}
          generate_release_notes: true
          files: ${{ env.ASSET_NAME }}

  update-main-version:
    needs: release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update main version
        run: |
          git fetch origin release:release
          git checkout main
          git merge release --ff-only
          git push origin main
        continue-on-error: false

  cleanup-release-branch:
    needs: update-main-version
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: success()

    steps:
      - name: Delete release branch
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/release'
              })
              console.log('Release branch deleted successfully')
            } catch (error) {
              console.log('Failed to delete release branch:', error.message)
              // 不让这个失败阻止整个工作流
            }